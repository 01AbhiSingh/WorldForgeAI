# backend/models/schemas.py

from pydantic import BaseModel, Field
from typing import Dict, List, Optional, Union, Any

# --- User Schemas (Keep existing) ---
class UserBase(BaseModel):
    username: str = Field(..., min_length=3, max_length=50)
    # Add other base user fields like email if needed

class UserCreate(UserBase):
    password: str = Field(..., min_length=6) # Password is required for creation

class UserInDB(UserBase):
    # Represents user data as stored internally (without plain password)
    hashed_password: str
    id: int # Example ID field (you'll need to manage IDs if using a real DB)


# --- Authentication Schemas (Keep existing) ---
class Token(BaseModel):
    access_token: str
    token_type: str = "bearer"
    username: str

class TokenData(BaseModel):
    username: str | None = None # Used internally for token validation

class UserLogin(BaseModel):
    username: str
    password: str

# --- New Schemas for LLM Initialization ---
class LLMSettings(BaseModel):
    """Schema for LLM provider settings provided by the frontend."""
    provider_key: str = Field(..., description="Key identifying the chosen LLM provider (e.g., 'Google Gemini', 'OpenAI')")
    api_key: Optional[str] = Field(None, description="The API key for the selected provider.")
    hf_model_id: Optional[str] = Field(None, description="Required if provider_key is 'Hugging Face'.")

# --- New Schemas for World Data & Generation ---
# Schema for the physical world section (from generate_world_seed)
class PhysicalWorldData(BaseModel):
    """Schema for the physical world data generated from the World Seed."""
    geography: Optional[str] = None
    climate: Optional[str] = None
    flora_fauna: Optional[str] = Field(None, alias='flora_fauna') # Use alias for field name
    resources: Optional[str] = None
    history: Optional[str] = None
    # Add other categories if generate_world_seed returns more

    class Config:
        populate_by_name = True # Allow mapping from alias

# Schema for the World Seed Generation Request
class WorldSeedGenerateRequest(BaseModel):
    """Schema for the request body to generate the initial world seed."""
    prompt: str = Field(..., description="The core concept or prompt for the world seed.")
    
class UserResponse(UserBase):
    """Represents user data returned to the frontend (without password/hashed_password)."""
    id: int # Include the ID field that was added to UserInDB

    class Config:
        from_attributes = True # Allow mapping from ORM objects (useful later with DB)

class CultureGenerateRequest(BaseModel):
        """Schema for Cultural Tapestry generation request."""
        societal_structure: str
        
class CultureData(BaseModel):
        """Schema for Cultural Tapestry response data."""
        # Define expected fields based on your world_builder output for culture
        societal_structure: str = Field(default="")
        values_and_beliefs: str = Field(default="")
        customs_and_traditions: str = Field(default="")
        technology_level: str = Field(default="")
        magic_system: str = Field(default="")
        # Add other fields as generated by your WorldBuilder for culture
        class Config:
            extra = "allow"
